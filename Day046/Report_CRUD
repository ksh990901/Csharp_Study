Create
@model Repot_CRUD.Models.Report

@{
    ViewData["Title"] = "Create";
}

<h1>Write</h1>

<h4>Report</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Id" class="control-label"></label>
                <input asp-for="Id" class="form-control" />
                <span asp-validation-for="Id" class="text-danger"></span>
            </div>
            <br />
            <div class="form-group">
                <label asp-for="Title" class="control-label"></label>
                <select asp-for="Title" class="form-select" >
                    <option selected>주제를 선정하세요.</option>
                    <option value="1">경제</option>
                    <option value="2">사회</option>
                    <option value="3">금융</option>
                </select>
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <br />
            <div class="form-group">
                <label asp-for="Content" class="control-label"></label>
                <textarea asp-for="Content" class="form-control" placeholder="내용을 입력해주세요." rows="20"></textarea>
                <span asp-validation-for="Content" class="text-danger"></span>
            </div>
            <br />
            <div class="form-group">
                <input type="submit" value="Write" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

Index
@model IEnumerable<Repot_CRUD.Models.Report>

@{
    ViewData["Title"] = "Index";
}

<h1>List</h1>


<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Content)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Id)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Content)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>

HomeControllers
namespace Repot_CRUD.Controllers
{
    public class HomeController : Controller
    {
        private readonly ReportDbContext _context;
        public HomeController(ReportDbContext context)
        {
            _context = context; 
        }
        //private readonly ILogger<HomeController> _logger;

        //public HomeController(ILogger<HomeController> logger)
        //{
        //    _logger = logger;
        //}
        public async Task<IActionResult> Index()
        {
            var reports = await _context.Report.ToListAsync<Report>();
            return View(reports);
        }
        public IActionResult Create()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Create(Report report)
        {
            if (ModelState.IsValid)
            {
                await _context.Report.AddAsync(report);
                await _context.SaveChangesAsync();
                return RedirectToAction("Index", "Home");
            }
            return View(report);
        }
        public IActionResult Privacy()
        { 
            return View();
        }
        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}

Program
using Microsoft.EntityFrameworkCore;
using Repot_CRUD.Models;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllersWithViews();

//appsetting.json --> connectionString
var provider = builder.Services.BuildServiceProvider();
var config = provider.GetRequiredService<IConfiguration>();
builder.Services.AddDbContext<ReportDbContext>(item => item.UseSqlServer(config.GetConnectionString("DefaultConnection")));

var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();
