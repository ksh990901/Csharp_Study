using OpenCvSharp;
using OpenCvSharp.Extensions;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Reflection.Emit;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace CoinCalculate
{
    public partial class Form1 : Form
    {
        // 실제 10원 동전의 지름 (mm)
        private const double RealDiameter10Won = 18.03;

        // 픽셀에서 mm로 변환하기 위한 크기 비율
        private double pixelToMmRatio;

        private List<CoinInfo> coinList;

        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            using (var openFileDialog = new OpenFileDialog())
            {
                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    string filePath = openFileDialog.FileName;

                    Mat srcImage = new Mat(filePath, ImreadModes.Color);
                    Mat resultImage = DetectCoins(srcImage);

                    // PictureBox의 크기에 맞게 결과 이미지를 조절하여 표시
                    pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;
                    pictureBox1.Image = resultImage.ToBitmap();

                    // 동전의 합을 계산
                    double totalValue = CalculateTotalValue();

                    // Label에 출력
                    label1.Text = $"Total Value: {totalValue} 원";
                }
            }
        }

        private Mat DetectCoins(Mat srcImage)
        {
            Mat grayImage = new Mat();
            Cv2.CvtColor(srcImage, grayImage, ColorConversionCodes.BGR2GRAY);
            Cv2.GaussianBlur(grayImage, grayImage, new OpenCvSharp.Size(5, 5), 0);

            Mat edges = new Mat();
            Cv2.Canny(grayImage, edges, 50, 150);

            OpenCvSharp.Point[][] contours;
            HierarchyIndex[] hierarchy;
            Cv2.FindContours(edges, out contours, out hierarchy, RetrievalModes.List, ContourApproximationModes.ApproxSimple);

            Mat resultImage = Mat.Zeros(srcImage.Size(), MatType.CV_8UC3);

            // PictureBox의 크기 비율을 계산
            double widthRatio = (double)resultImage.Cols / pictureBox1.Width;
            double heightRatio = (double)resultImage.Rows / pictureBox1.Height;

            // 동전 정보를 저장할 리스트
            coinList = new List<CoinInfo>();

            // 동전을 찾아서 PictureBox 크기에 맞게 그리기
            for (int i = 0; i < contours.Length; i++)
            {
                double area = Cv2.ContourArea(contours[i]);
                if (area > 1000)
                {
                    // 동전의 좌표 및 크기를 PictureBox에 맞게 변환
                    OpenCvSharp.Point[] transformedContour = Array.ConvertAll(contours[i], p =>
                        new OpenCvSharp.Point(p.X / widthRatio, p.Y / heightRatio)
                    );

                    // 외접하는 원의 반지름 계산
                    float[] radius = new float[1];
                    OpenCvSharp.Point2f center = new OpenCvSharp.Point2f();
                    Cv2.MinEnclosingCircle(transformedContour, out center, out radius[0]);

                    // 동전 정보를 리스트에 추가
                    coinList.Add(new CoinInfo { Center = center, Radius = radius[0] });

                    // 원 그리기
                    Cv2.Circle(resultImage, new OpenCvSharp.Point((int)center.X, (int)center.Y), (int)radius[0], Scalar.Green, 2);
                }
            }

            // 크기 비율 계산
            pixelToMmRatio = RealDiameter10Won / (2 * coinList.Find(c => c.Radius < 30).Radius);

            // 동전 종류 판별 및 크기 표시
            foreach (var coin in coinList)
            {
                double realDiameter = 2 * coin.Radius * pixelToMmRatio;

                string coinType = GetCoinType(realDiameter);

                Cv2.PutText(resultImage, $"{coinType} ({realDiameter:F2}mm)", new OpenCvSharp.Point((int)coin.Center.X, (int)coin.Center.Y), HersheyFonts.HersheyPlain, 1, Scalar.Yellow, 2);
            }

            return resultImage;
        }

        private string GetCoinType(double diameter)
        {
            if (diameter < 15)
            {
                return "10";
            }
            else if (diameter >= 15 && diameter < 20)
            {
                return "50";
            }
            else if (diameter >= 20 && diameter < 25)
            {
                return "100";
            }
            else
            {
                return "500원";
            }
        }

        private double CalculateTotalValue()
        {
            double totalValue = 0;

            foreach (var coin in coinList)
            {
                double realDiameter = 2 * coin.Radius * pixelToMmRatio;
                string coinType = GetCoinType(realDiameter);

                // 각 동전의 가치를 합산
                switch (coinType)
                {
                    case "10":
                        totalValue += 10;
                        break;
                    case "50":
                        totalValue += 50;
                        break;
                    case "100":
                        totalValue += 100;
                        break;
                    case "500원":
                        totalValue += 500;
                        break;
                }
            }

            return totalValue;
        }


    }

    // 동전 정보를 저장하는 클래스
    public class CoinInfo
    {
        public OpenCvSharp.Point2f Center { get; set; }
        public float Radius { get; set; }
    }

}
