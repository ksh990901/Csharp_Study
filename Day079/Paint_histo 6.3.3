namespace Paint_histo6._3._3
{
    internal class Program
    {
        // 직접 히스토그램을 계산하는 함수
        static void CalHisto(Mat image, out Mat hist, int bins, int range_max = 256)
        {
            hist = new Mat(bins, 1, MatType.CV_32F, new Scalar(0));
            float gap = range_max / (float)bins;
            
            for(int i = 0; i < image.Rows; i++) 
            {
                for(int j = 0; j < image.Cols; j++)
                {
                    int idx = (int)(image.At<byte>(i ,j) / gap);
                    hist.Set<float>(idx, hist.At<float>(idx) + 1);    
                }
            }
        }
        // OpenCV의 calHist 함수를 이용해 히스토그램을 계산하는 함수
        static void CalHistoUsingOpenCv(Mat image, out Mat hist, int bins, int range_max = 256)
        {
            int[] histSize = { bins };
            Rangef[] ranges = { new Rangef(0, range_max) };
            int[] channels = { 0 };

            hist = new Mat();
            Cv2.CalcHist(new[] { image }, channels, null , hist, 1, histSize, ranges);
        }
        static void Main(string[] args)
        {
            Mat image = Cv2.ImRead("C:\\Temp\\image\\pixel_test.jpg", ImreadModes.Grayscale);
            {
                if (image.Empty())
                {
                    Console.WriteLine("이미지를 로드 불가합니다.");
                    return;
                }

                Mat hist;
                CalHistoUsingOpenCv(image, out hist, 256);

                // 히스토그램 화소값 출력
                for(int i = 0; i < hist.Rows; i++)
                {
                    Console.WriteLine(hist.At<float>(i) + " , ");
                }
                Console.WriteLine();

                Cv2.ImShow("image", image);
                Cv2.WaitKey();
            }
        }
    }
}
