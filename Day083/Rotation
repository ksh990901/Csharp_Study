using OpenCvSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Rotation
{
    internal class Program
    {
        static byte Bilinear_value(Mat img, double x, double y) // 단일 화소 양선형 보간
        {
            if (x >= img.Cols - 1) x--;
            if (y >= img.Rows - 1) y--;

            //4개 화소 가져옴

            Point pt = new Point((int)x, (int)y);
            int A = img.At<byte>(pt.Y, pt.X);  // 왼쪽 상단 화소
            int B = img.At<byte>(pt.Y + 1, pt.X); // 왼쪽 하단 화소
            int C = img.At<byte>(pt.Y, pt.X + 1); // 오른쪽 상단 화소
            int D = img.At<byte>(pt.Y + 1, pt.X + 1); // 오른쪽 하단 화소

            // 1차 보간
            double alpha = y - pt.Y;
            double beta = x - pt.X;

            int M1 = A + (int)Math.Round(alpha * (B - A));
            int M2 = C + (int)Math.Round(alpha * (D - C));

            //2차 보간
            int P = M1 + (int)Math.Round(beta * (M2 - M1));

            return (byte)P;
        }
        // 회전 변환 함수
        static void rotation(Mat img, Mat dst, double dgree)  // 원점 기준 회전 변환
        {
            double radian = dgree / 180 * Math.PI; // 회전 각도 - 라디안
            double sin_value = Math.Sin(radian); // 사인 코사인 값 미리 계산
            double cos_value = Math.Cos(radian);

            for (int i = 0; i < dst.Rows;  i++)  // 목적 영상 순회 - 역방향 사상
            {
                for(int j = 0; j < dst.Cols; j++)
                {
                    double x = j * cos_value + i * sin_value;  // 회전 변환 수식
                    double y = -j * sin_value + i * cos_value;

                    if (x >= 0 && x < img.Cols && y >= 0 && y < img.Rows)
                        dst.At<byte>(i, j) = Bilinear_value(img, x, y);
                }
            }
        }
        // pt 좌표 기준 회전 변환 함수
        static void rotation(Mat img, Mat dst, double degree, Point pt)
        {
            double radian = degree / 180 * Math.PI;
            double sin_value = Math.Sin(radian);
            double cos_value = Math.Cos(radian);

          

            for (int i =0; i < dst.Rows; i++)
            {
                for(int j = 0; j < dst.Cols; j++)
                {
                    int jj = j - pt.X;
                    int ii = i - pt.Y;
                    double x = jj * cos_value + ii * sin_value + pt.X;
                    double y = -jj * sin_value + ii * cos_value + pt.Y;

                    if (x >= 0 && x < img.Cols && y >= 0 && y < img.Rows)
                        dst.At<byte>(i, j) = Bilinear_value(img, x, y);
                }   
            }
        }
        static void Main(string[] args)
        {
            Mat image = Cv2.ImRead("C:\\Temp\\image\\perspective_test.jpg", ImreadModes.Grayscale);
            if (image.Empty())
            {
                throw new Exception("이미지를 로드 할 수 없습니다.");
            }

            Mat dst1 = new Mat(image.Size(), MatType.CV_8UC1);
            Mat dst2 = new Mat(image.Size(), MatType.CV_8UC1);
         

            Point center = new Point(image.Width / 2, image.Height / 2);

            rotation(image, dst1, 20);
            rotation(image, dst2, 20, center);

            Cv2.ImShow("image", image);
            Cv2.ImShow("dst1-20도 회전(원점)", dst1);
            Cv2.ImShow("dst2-20도 회전(중심점)", dst2);

            Cv2.WaitKey();
        }
    }
}
